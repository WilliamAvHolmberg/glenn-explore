/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * api
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddRaceResultRequestDTO,
  AdminCustomCheckoutRequestDTO,
  AdminUnlockModelRequestDTO,
  AdminUserResponseDTO,
  ChangeUserNameRequestDTO,
  ClaimAccountRequestDTO,
  CreateGuestRequestDTO,
  CreateModelRequestDTO,
  CreateUserRequestDTO,
  FileInfoDtoDTO,
  FileUploadDtoDTO,
  GameStatisticsDTO,
  GetApiOpenrouterToolsChatStreamParams,
  GetApiUsersParams,
  GrantPremiumModelsResponseDTO,
  IModelConfigDTO,
  LoginRequestDTO,
  LoginResponseDTO,
  MakeUserAdminRequestDTO,
  ModelDetailsDtoDTO,
  PostApiFilesBody,
  PurchaseModelResponseDTO,
  RaceRecordResponseDTO,
  RaceResultResponseDTO,
  RequestOtpRequestDTO,
  RequestOtpResponseDTO,
  SetUserPaidRequestDTO,
  ToplistEntryDTO,
  UnlockedModelDtoDTO,
  UpdateModelRequestDTO,
  UpdateUserRequestDTO,
  UserListResponseDTO,
  UserProfileResponseDTO,
  UserResponseDTO,
  VerifyOtpRequestDTO
} from '../models';

import { customClient } from '../client';
import type { ErrorType } from '../client';




export const postApiAuthLogin = (
    loginRequestDTO: LoginRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<LoginResponseDTO>(
      {url: `/api/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDTO}, TContext> => {
    
const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: LoginRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = LoginRequestDTO
    export type PostApiAuthLoginMutationError = ErrorType<unknown>

    export const usePostApiAuthLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: LoginRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthGuest = (
    createGuestRequestDTO: CreateGuestRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<LoginResponseDTO>(
      {url: `/api/Auth/guest`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGuestRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthGuestMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthGuest>>, TError,{data: CreateGuestRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthGuest>>, TError,{data: CreateGuestRequestDTO}, TContext> => {
    
const mutationKey = ['postApiAuthGuest'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthGuest>>, {data: CreateGuestRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthGuest(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthGuestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthGuest>>>
    export type PostApiAuthGuestMutationBody = CreateGuestRequestDTO
    export type PostApiAuthGuestMutationError = ErrorType<unknown>

    export const usePostApiAuthGuest = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthGuest>>, TError,{data: CreateGuestRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthGuest>>,
        TError,
        {data: CreateGuestRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthGuestMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthClaim = (
    claimAccountRequestDTO: ClaimAccountRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<LoginResponseDTO>(
      {url: `/api/Auth/claim`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: claimAccountRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthClaimMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthClaim>>, TError,{data: ClaimAccountRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthClaim>>, TError,{data: ClaimAccountRequestDTO}, TContext> => {
    
const mutationKey = ['postApiAuthClaim'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthClaim>>, {data: ClaimAccountRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthClaim(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthClaimMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthClaim>>>
    export type PostApiAuthClaimMutationBody = ClaimAccountRequestDTO
    export type PostApiAuthClaimMutationError = ErrorType<unknown>

    export const usePostApiAuthClaim = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthClaim>>, TError,{data: ClaimAccountRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthClaim>>,
        TError,
        {data: ClaimAccountRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthClaimMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthLogout = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/Auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiAuthLogoutMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext> => {
    
const mutationKey = ['postApiAuthLogout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogout>>, void> = () => {
          

          return  postApiAuthLogout()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogout>>>
    
    export type PostApiAuthLogoutMutationError = ErrorType<unknown>

    export const usePostApiAuthLogout = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiAuthMe = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<UserProfileResponseDTO>(
      {url: `/api/Auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiAuthMeQueryKey = () => {
    return [`/api/Auth/me`] as const;
    }

    
export const getGetApiAuthMeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthMe>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthMe>>> = ({ signal }) => getApiAuthMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthMeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthMe>>>
export type GetApiAuthMeInfiniteQueryError = ErrorType<unknown>


export function useGetApiAuthMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthMe>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthMe>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthMe>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthMe>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthMe>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAuthMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthMe>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthMeInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiAuthMeQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthMe>>> = ({ signal }) => getApiAuthMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthMeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthMe>>>
export type GetApiAuthMeQueryError = ErrorType<unknown>


export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthMe>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthMe>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAuthRequestOtp = (
    requestOtpRequestDTO: RequestOtpRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<RequestOtpResponseDTO>(
      {url: `/api/Auth/request-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestOtpRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthRequestOtpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRequestOtp>>, TError,{data: RequestOtpRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRequestOtp>>, TError,{data: RequestOtpRequestDTO}, TContext> => {
    
const mutationKey = ['postApiAuthRequestOtp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRequestOtp>>, {data: RequestOtpRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRequestOtp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRequestOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRequestOtp>>>
    export type PostApiAuthRequestOtpMutationBody = RequestOtpRequestDTO
    export type PostApiAuthRequestOtpMutationError = ErrorType<unknown>

    export const usePostApiAuthRequestOtp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRequestOtp>>, TError,{data: RequestOtpRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRequestOtp>>,
        TError,
        {data: RequestOtpRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthRequestOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthVerifyOtp = (
    verifyOtpRequestDTO: VerifyOtpRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<LoginResponseDTO>(
      {url: `/api/Auth/verify-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyOtpRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthVerifyOtpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, TError,{data: VerifyOtpRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, TError,{data: VerifyOtpRequestDTO}, TContext> => {
    
const mutationKey = ['postApiAuthVerifyOtp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, {data: VerifyOtpRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthVerifyOtp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthVerifyOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>>
    export type PostApiAuthVerifyOtpMutationBody = VerifyOtpRequestDTO
    export type PostApiAuthVerifyOtpMutationError = ErrorType<unknown>

    export const usePostApiAuthVerifyOtp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, TError,{data: VerifyOtpRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthVerifyOtp>>,
        TError,
        {data: VerifyOtpRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthVerifyOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthResendOtp = (
    requestOtpRequestDTO: RequestOtpRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<RequestOtpResponseDTO>(
      {url: `/api/Auth/resend-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestOtpRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthResendOtpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResendOtp>>, TError,{data: RequestOtpRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResendOtp>>, TError,{data: RequestOtpRequestDTO}, TContext> => {
    
const mutationKey = ['postApiAuthResendOtp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthResendOtp>>, {data: RequestOtpRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthResendOtp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthResendOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthResendOtp>>>
    export type PostApiAuthResendOtpMutationBody = RequestOtpRequestDTO
    export type PostApiAuthResendOtpMutationError = ErrorType<unknown>

    export const usePostApiAuthResendOtp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthResendOtp>>, TError,{data: RequestOtpRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthResendOtp>>,
        TError,
        {data: RequestOtpRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthResendOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiAuthCheck = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<LoginResponseDTO>(
      {url: `/api/Auth/check`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiAuthCheckQueryKey = () => {
    return [`/api/Auth/check`] as const;
    }

    
export const getGetApiAuthCheckInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthCheck>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthCheck>>> = ({ signal }) => getApiAuthCheck(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthCheckInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthCheck>>>
export type GetApiAuthCheckInfiniteQueryError = ErrorType<unknown>


export function useGetApiAuthCheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthCheck>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthCheck>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthCheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthCheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthCheck>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthCheck>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthCheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthCheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthCheck>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAuthCheckInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiAuthCheck>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthCheckInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiAuthCheckQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthCheck>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthCheck>>> = ({ signal }) => getApiAuthCheck(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthCheck>>>
export type GetApiAuthCheckQueryError = ErrorType<unknown>


export function useGetApiAuthCheck<TData = Awaited<ReturnType<typeof getApiAuthCheck>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthCheck>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthCheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthCheck<TData = Awaited<ReturnType<typeof getApiAuthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthCheck>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthCheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthCheck<TData = Awaited<ReturnType<typeof getApiAuthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAuthCheck<TData = Awaited<ReturnType<typeof getApiAuthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheck>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthCheckQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiFiles = (
    postApiFilesBody: PostApiFilesBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiFilesBody.file !== undefined) {
 formData.append('file', postApiFilesBody.file)
 }

      return customClient<FileUploadDtoDTO>(
      {url: `/api/files`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiFilesMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFiles>>, TError,{data: PostApiFilesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFiles>>, TError,{data: PostApiFilesBody}, TContext> => {
    
const mutationKey = ['postApiFiles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFiles>>, {data: PostApiFilesBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiFiles(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFilesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFiles>>>
    export type PostApiFilesMutationBody = PostApiFilesBody
    export type PostApiFilesMutationError = ErrorType<unknown>

    export const usePostApiFiles = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFiles>>, TError,{data: PostApiFilesBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiFiles>>,
        TError,
        {data: PostApiFilesBody},
        TContext
      > => {

      const mutationOptions = getPostApiFilesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiFiles = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<FileInfoDtoDTO[]>(
      {url: `/api/files`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFilesQueryKey = () => {
    return [`/api/files`] as const;
    }

    
export const getGetApiFilesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiFiles>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFiles>>> = ({ signal }) => getApiFiles(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFiles>>>
export type GetApiFilesInfiniteQueryError = ErrorType<unknown>


export function useGetApiFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFiles>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFiles>>,
          TError,
          Awaited<ReturnType<typeof getApiFiles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFiles>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFiles>>,
          TError,
          Awaited<ReturnType<typeof getApiFiles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFiles>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFiles>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiFilesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiFilesQueryOptions = <TData = Awaited<ReturnType<typeof getApiFiles>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFiles>>> = ({ signal }) => getApiFiles(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFiles>>>
export type GetApiFilesQueryError = ErrorType<unknown>


export function useGetApiFiles<TData = Awaited<ReturnType<typeof getApiFiles>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFiles>>,
          TError,
          Awaited<ReturnType<typeof getApiFiles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFiles<TData = Awaited<ReturnType<typeof getApiFiles>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFiles>>,
          TError,
          Awaited<ReturnType<typeof getApiFiles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFiles<TData = Awaited<ReturnType<typeof getApiFiles>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFiles<TData = Awaited<ReturnType<typeof getApiFiles>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFiles>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiFilesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiFilesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<FileInfoDtoDTO>(
      {url: `/api/files/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFilesIdQueryKey = (id: string,) => {
    return [`/api/files/${id}`] as const;
    }

    
export const getGetApiFilesIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiFilesId>>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFilesId>>> = ({ signal }) => getApiFilesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFilesId>>>
export type GetApiFilesIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiFilesIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFilesId>>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFilesId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFilesId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFilesIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFilesId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiFilesIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiFilesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFilesId>>> = ({ signal }) => getApiFilesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFilesId>>>
export type GetApiFilesIdQueryError = ErrorType<unknown>


export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiFilesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiFilesId = (
    id: string,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/files/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiFilesIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFilesId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiFilesId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiFilesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiFilesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiFilesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiFilesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFilesId>>>
    
    export type DeleteApiFilesIdMutationError = ErrorType<unknown>

    export const useDeleteApiFilesId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFilesId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiFilesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiFilesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiModelsUnlocked = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<UnlockedModelDtoDTO[]>(
      {url: `/api/models/unlocked`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsUnlockedQueryKey = () => {
    return [`/api/models/unlocked`] as const;
    }

    
export const getGetApiModelsUnlockedInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsUnlocked>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsUnlockedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsUnlocked>>> = ({ signal }) => getApiModelsUnlocked(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsUnlockedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsUnlocked>>>
export type GetApiModelsUnlockedInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsUnlockedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsUnlocked>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsUnlocked>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsUnlocked>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsUnlockedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsUnlocked>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsUnlocked>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsUnlocked>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsUnlockedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsUnlocked>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsUnlockedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsUnlocked>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsUnlockedInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsUnlockedQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsUnlockedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsUnlocked>>> = ({ signal }) => getApiModelsUnlocked(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsUnlockedQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsUnlocked>>>
export type GetApiModelsUnlockedQueryError = ErrorType<unknown>


export function useGetApiModelsUnlocked<TData = Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsUnlocked>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsUnlocked>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsUnlocked<TData = Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsUnlocked>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsUnlocked>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsUnlocked<TData = Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsUnlocked<TData = Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsUnlocked>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsUnlockedQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiModelsAvailable = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO[]>(
      {url: `/api/models/available`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsAvailableQueryKey = () => {
    return [`/api/models/available`] as const;
    }

    
export const getGetApiModelsAvailableInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAvailable>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsAvailableQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsAvailable>>> = ({ signal }) => getApiModelsAvailable(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsAvailableInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsAvailable>>>
export type GetApiModelsAvailableInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAvailable>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAvailable>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAvailable>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAvailable>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAvailable>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAvailable>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAvailable>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAvailable>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsAvailableInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsAvailable>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsAvailableQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsAvailable>>> = ({ signal }) => getApiModelsAvailable(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsAvailable>>>
export type GetApiModelsAvailableQueryError = ErrorType<unknown>


export function useGetApiModelsAvailable<TData = Awaited<ReturnType<typeof getApiModelsAvailable>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAvailable>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAvailable>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAvailable<TData = Awaited<ReturnType<typeof getApiModelsAvailable>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAvailable>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAvailable>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAvailable<TData = Awaited<ReturnType<typeof getApiModelsAvailable>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsAvailable<TData = Awaited<ReturnType<typeof getApiModelsAvailable>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAvailable>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsAvailableQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiModelsPurchaseModelId = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<PurchaseModelResponseDTO>(
      {url: `/api/models/purchase/${modelId}`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiModelsPurchaseModelIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsPurchaseModelId>>, TError,{modelId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsPurchaseModelId>>, TError,{modelId: string}, TContext> => {
    
const mutationKey = ['postApiModelsPurchaseModelId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsPurchaseModelId>>, {modelId: string}> = (props) => {
          const {modelId} = props ?? {};

          return  postApiModelsPurchaseModelId(modelId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsPurchaseModelIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsPurchaseModelId>>>
    
    export type PostApiModelsPurchaseModelIdMutationError = ErrorType<unknown>

    export const usePostApiModelsPurchaseModelId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsPurchaseModelId>>, TError,{modelId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsPurchaseModelId>>,
        TError,
        {modelId: string},
        TContext
      > => {

      const mutationOptions = getPostApiModelsPurchaseModelIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiModelsCheckModelId = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<boolean>(
      {url: `/api/models/check/${modelId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsCheckModelIdQueryKey = (modelId: string,) => {
    return [`/api/models/check/${modelId}`] as const;
    }

    
export const getGetApiModelsCheckModelIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>, TError = ErrorType<unknown>>(modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsCheckModelIdQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsCheckModelId>>> = ({ signal }) => getApiModelsCheckModelId(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsCheckModelIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>
export type GetApiModelsCheckModelIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsCheckModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsCheckModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsCheckModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsCheckModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsCheckModelIdInfiniteQueryOptions(modelId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsCheckModelIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError = ErrorType<unknown>>(modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsCheckModelIdQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsCheckModelId>>> = ({ signal }) => getApiModelsCheckModelId(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsCheckModelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsCheckModelId>>>
export type GetApiModelsCheckModelIdQueryError = ErrorType<unknown>


export function useGetApiModelsCheckModelId<TData = Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsCheckModelId<TData = Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsCheckModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsCheckModelId<TData = Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsCheckModelId<TData = Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsCheckModelId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsCheckModelIdQueryOptions(modelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiModelsAdminGrantPremiumToPaidUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<GrantPremiumModelsResponseDTO>(
      {url: `/api/models/admin/grant-premium-to-paid-users`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiModelsAdminGrantPremiumToPaidUsersMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminGrantPremiumToPaidUsers>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminGrantPremiumToPaidUsers>>, TError,void, TContext> => {
    
const mutationKey = ['postApiModelsAdminGrantPremiumToPaidUsers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsAdminGrantPremiumToPaidUsers>>, void> = () => {
          

          return  postApiModelsAdminGrantPremiumToPaidUsers()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsAdminGrantPremiumToPaidUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsAdminGrantPremiumToPaidUsers>>>
    
    export type PostApiModelsAdminGrantPremiumToPaidUsersMutationError = ErrorType<unknown>

    export const usePostApiModelsAdminGrantPremiumToPaidUsers = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminGrantPremiumToPaidUsers>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsAdminGrantPremiumToPaidUsers>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiModelsAdminGrantPremiumToPaidUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiModelsAdminUnlockModel = (
    adminUnlockModelRequestDTO: AdminUnlockModelRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/models/admin/unlock-model`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminUnlockModelRequestDTO, signal
    },
      );
    }
  


export const getPostApiModelsAdminUnlockModelMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminUnlockModel>>, TError,{data: AdminUnlockModelRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminUnlockModel>>, TError,{data: AdminUnlockModelRequestDTO}, TContext> => {
    
const mutationKey = ['postApiModelsAdminUnlockModel'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsAdminUnlockModel>>, {data: AdminUnlockModelRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiModelsAdminUnlockModel(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsAdminUnlockModelMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsAdminUnlockModel>>>
    export type PostApiModelsAdminUnlockModelMutationBody = AdminUnlockModelRequestDTO
    export type PostApiModelsAdminUnlockModelMutationError = ErrorType<unknown>

    export const usePostApiModelsAdminUnlockModel = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminUnlockModel>>, TError,{data: AdminUnlockModelRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsAdminUnlockModel>>,
        TError,
        {data: AdminUnlockModelRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiModelsAdminUnlockModelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiModels = (
    createModelRequestDTO: CreateModelRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO>(
      {url: `/api/models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createModelRequestDTO, signal
    },
      );
    }
  


export const getPostApiModelsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModels>>, TError,{data: CreateModelRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiModels>>, TError,{data: CreateModelRequestDTO}, TContext> => {
    
const mutationKey = ['postApiModels'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModels>>, {data: CreateModelRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiModels(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModels>>>
    export type PostApiModelsMutationBody = CreateModelRequestDTO
    export type PostApiModelsMutationError = ErrorType<unknown>

    export const usePostApiModels = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModels>>, TError,{data: CreateModelRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiModels>>,
        TError,
        {data: CreateModelRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiModelsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putApiModelsModelId = (
    modelId: string,
    updateModelRequestDTO: UpdateModelRequestDTO,
 ) => {
      
      
      return customClient<ModelDetailsDtoDTO>(
      {url: `/api/models/${modelId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateModelRequestDTO
    },
      );
    }
  


export const getPutApiModelsModelIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiModelsModelId>>, TError,{modelId: string;data: UpdateModelRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiModelsModelId>>, TError,{modelId: string;data: UpdateModelRequestDTO}, TContext> => {
    
const mutationKey = ['putApiModelsModelId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiModelsModelId>>, {modelId: string;data: UpdateModelRequestDTO}> = (props) => {
          const {modelId,data} = props ?? {};

          return  putApiModelsModelId(modelId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiModelsModelIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiModelsModelId>>>
    export type PutApiModelsModelIdMutationBody = UpdateModelRequestDTO
    export type PutApiModelsModelIdMutationError = ErrorType<unknown>

    export const usePutApiModelsModelId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiModelsModelId>>, TError,{modelId: string;data: UpdateModelRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiModelsModelId>>,
        TError,
        {modelId: string;data: UpdateModelRequestDTO},
        TContext
      > => {

      const mutationOptions = getPutApiModelsModelIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiModelsMyModels = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO[]>(
      {url: `/api/models/my-models`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsMyModelsQueryKey = () => {
    return [`/api/models/my-models`] as const;
    }

    
export const getGetApiModelsMyModelsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsMyModels>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsMyModelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsMyModels>>> = ({ signal }) => getApiModelsMyModels(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsMyModelsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsMyModels>>>
export type GetApiModelsMyModelsInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsMyModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsMyModels>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsMyModels>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsMyModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsMyModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsMyModels>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsMyModels>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsMyModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsMyModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsMyModels>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsMyModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsMyModels>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsMyModelsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsMyModelsQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsMyModels>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsMyModelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsMyModels>>> = ({ signal }) => getApiModelsMyModels(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsMyModelsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsMyModels>>>
export type GetApiModelsMyModelsQueryError = ErrorType<unknown>


export function useGetApiModelsMyModels<TData = Awaited<ReturnType<typeof getApiModelsMyModels>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsMyModels>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsMyModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsMyModels<TData = Awaited<ReturnType<typeof getApiModelsMyModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsMyModels>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsMyModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsMyModels<TData = Awaited<ReturnType<typeof getApiModelsMyModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsMyModels<TData = Awaited<ReturnType<typeof getApiModelsMyModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsMyModels>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsMyModelsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiModelsAdminAll = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO[]>(
      {url: `/api/models/admin/all`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsAdminAllQueryKey = () => {
    return [`/api/models/admin/all`] as const;
    }

    
export const getGetApiModelsAdminAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminAll>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsAdminAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsAdminAll>>> = ({ signal }) => getApiModelsAdminAll(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsAdminAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsAdminAll>>>
export type GetApiModelsAdminAllInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminAll>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminAll>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminAll>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminAll>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsAdminAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsAdminAllQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsAdminAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsAdminAll>>> = ({ signal }) => getApiModelsAdminAll(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsAdminAllQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsAdminAll>>>
export type GetApiModelsAdminAllQueryError = ErrorType<unknown>


export function useGetApiModelsAdminAll<TData = Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminAll<TData = Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminAll<TData = Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsAdminAll<TData = Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsAdminAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiModelsAdminModelId = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO>(
      {url: `/api/models/admin/${modelId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsAdminModelIdQueryKey = (modelId: string,) => {
    return [`/api/models/admin/${modelId}`] as const;
    }

    
export const getGetApiModelsAdminModelIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>, TError = ErrorType<unknown>>(modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsAdminModelIdQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsAdminModelId>>> = ({ signal }) => getApiModelsAdminModelId(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsAdminModelIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>
export type GetApiModelsAdminModelIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsAdminModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsAdminModelIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsAdminModelIdInfiniteQueryOptions(modelId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsAdminModelIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError = ErrorType<unknown>>(modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsAdminModelIdQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsAdminModelId>>> = ({ signal }) => getApiModelsAdminModelId(modelId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsAdminModelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsAdminModelId>>>
export type GetApiModelsAdminModelIdQueryError = ErrorType<unknown>


export function useGetApiModelsAdminModelId<TData = Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminModelId<TData = Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsAdminModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsAdminModelId<TData = Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsAdminModelId<TData = Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError = ErrorType<unknown>>(
 modelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsAdminModelId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsAdminModelIdQueryOptions(modelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiModelsAdminModelIdToggleActive = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO>(
      {url: `/api/models/admin/${modelId}/toggle-active`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiModelsAdminModelIdToggleActiveMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleActive>>, TError,{modelId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleActive>>, TError,{modelId: string}, TContext> => {
    
const mutationKey = ['postApiModelsAdminModelIdToggleActive'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleActive>>, {modelId: string}> = (props) => {
          const {modelId} = props ?? {};

          return  postApiModelsAdminModelIdToggleActive(modelId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsAdminModelIdToggleActiveMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleActive>>>
    
    export type PostApiModelsAdminModelIdToggleActiveMutationError = ErrorType<unknown>

    export const usePostApiModelsAdminModelIdToggleActive = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleActive>>, TError,{modelId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleActive>>,
        TError,
        {modelId: string},
        TContext
      > => {

      const mutationOptions = getPostApiModelsAdminModelIdToggleActiveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiModelsAdminModelIdToggleFeatured = (
    modelId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<ModelDetailsDtoDTO>(
      {url: `/api/models/admin/${modelId}/toggle-featured`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiModelsAdminModelIdToggleFeaturedMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleFeatured>>, TError,{modelId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleFeatured>>, TError,{modelId: string}, TContext> => {
    
const mutationKey = ['postApiModelsAdminModelIdToggleFeatured'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleFeatured>>, {modelId: string}> = (props) => {
          const {modelId} = props ?? {};

          return  postApiModelsAdminModelIdToggleFeatured(modelId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsAdminModelIdToggleFeaturedMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleFeatured>>>
    
    export type PostApiModelsAdminModelIdToggleFeaturedMutationError = ErrorType<unknown>

    export const usePostApiModelsAdminModelIdToggleFeatured = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleFeatured>>, TError,{modelId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsAdminModelIdToggleFeatured>>,
        TError,
        {modelId: string},
        TContext
      > => {

      const mutationOptions = getPostApiModelsAdminModelIdToggleFeaturedMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiModelsConfigTypesType = (
    type: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<IModelConfigDTO>(
      {url: `/api/models/config-types/${type}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiModelsConfigTypesTypeQueryKey = (type: string,) => {
    return [`/api/models/config-types/${type}`] as const;
    }

    
export const getGetApiModelsConfigTypesTypeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>, TError = ErrorType<unknown>>(type: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsConfigTypesTypeQueryKey(type);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>> = ({ signal }) => getApiModelsConfigTypesType(type, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(type),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsConfigTypesTypeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>
export type GetApiModelsConfigTypesTypeInfiniteQueryError = ErrorType<unknown>


export function useGetApiModelsConfigTypesTypeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>, TError = ErrorType<unknown>>(
 type: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsConfigTypesTypeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>, TError = ErrorType<unknown>>(
 type: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsConfigTypesTypeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>, TError = ErrorType<unknown>>(
 type: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsConfigTypesTypeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>, TError = ErrorType<unknown>>(
 type: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsConfigTypesTypeInfiniteQueryOptions(type,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiModelsConfigTypesTypeQueryOptions = <TData = Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError = ErrorType<unknown>>(type: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiModelsConfigTypesTypeQueryKey(type);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>> = ({ signal }) => getApiModelsConfigTypesType(type, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(type),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiModelsConfigTypesTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>>
export type GetApiModelsConfigTypesTypeQueryError = ErrorType<unknown>


export function useGetApiModelsConfigTypesType<TData = Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError = ErrorType<unknown>>(
 type: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsConfigTypesType<TData = Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError = ErrorType<unknown>>(
 type: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>,
          TError,
          Awaited<ReturnType<typeof getApiModelsConfigTypesType>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiModelsConfigTypesType<TData = Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError = ErrorType<unknown>>(
 type: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiModelsConfigTypesType<TData = Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError = ErrorType<unknown>>(
 type: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiModelsConfigTypesType>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiModelsConfigTypesTypeQueryOptions(type,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiOpenrouterToolsConversationsConversationId = (
    conversationId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/openrouter/tools/conversations/${conversationId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsConversationsConversationIdQueryKey = (conversationId: string,) => {
    return [`/api/openrouter/tools/conversations/${conversationId}`] as const;
    }

    
export const getGetApiOpenrouterToolsConversationsConversationIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>, TError = ErrorType<unknown>>(conversationId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsConversationsConversationIdQueryKey(conversationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>> = ({ signal }) => getApiOpenrouterToolsConversationsConversationId(conversationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(conversationId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsConversationsConversationIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>
export type GetApiOpenrouterToolsConversationsConversationIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsConversationsConversationIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>, TError = ErrorType<unknown>>(
 conversationId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsConversationsConversationIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsConversationsConversationIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsConversationsConversationIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsConversationsConversationIdInfiniteQueryOptions(conversationId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOpenrouterToolsConversationsConversationIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsConversationsConversationIdQueryKey(conversationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>> = ({ signal }) => getApiOpenrouterToolsConversationsConversationId(conversationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(conversationId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsConversationsConversationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>
export type GetApiOpenrouterToolsConversationsConversationIdQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsConversationsConversationIdQueryOptions(conversationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiOpenrouterToolsModels = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/openrouter/tools/models`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsModelsQueryKey = () => {
    return [`/api/openrouter/tools/models`] as const;
    }

    
export const getGetApiOpenrouterToolsModelsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsModelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>> = ({ signal }) => getApiOpenrouterToolsModels(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsModelsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>
export type GetApiOpenrouterToolsModelsInfiniteQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsModelsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsModelsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOpenrouterToolsModelsQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsModelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>> = ({ signal }) => getApiOpenrouterToolsModels(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsModelsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>
export type GetApiOpenrouterToolsModelsQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsModelsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiOpenrouterToolsChatStream = (
    params?: GetApiOpenrouterToolsChatStreamParams,
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/openrouter/tools/chat/stream`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsChatStreamQueryKey = (params?: GetApiOpenrouterToolsChatStreamParams,) => {
    return [`/api/openrouter/tools/chat/stream`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiOpenrouterToolsChatStreamInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, GetApiOpenrouterToolsChatStreamParams['pageNumber']>, TError = ErrorType<unknown>>(params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData, Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsChatStreamQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']> = ({ signal, pageParam }) => getApiOpenrouterToolsChatStream({...params, pageNumber: pageParam || params?.['pageNumber']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData, Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsChatStreamInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>>
export type GetApiOpenrouterToolsChatStreamInfiniteQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsChatStreamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, GetApiOpenrouterToolsChatStreamParams['pageNumber']>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiOpenrouterToolsChatStreamParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData, Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsChatStreamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, GetApiOpenrouterToolsChatStreamParams['pageNumber']>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData, Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsChatStreamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, GetApiOpenrouterToolsChatStreamParams['pageNumber']>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData, Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsChatStreamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, GetApiOpenrouterToolsChatStreamParams['pageNumber']>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData, Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, QueryKey, GetApiOpenrouterToolsChatStreamParams['pageNumber']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsChatStreamInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOpenrouterToolsChatStreamQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsChatStreamQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>> = ({ signal }) => getApiOpenrouterToolsChatStream(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsChatStreamQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>>
export type GetApiOpenrouterToolsChatStreamQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiOpenrouterToolsChatStreamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsChatStreamQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiOpenrouterToolsList = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/openrouter/tools/list`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsListQueryKey = () => {
    return [`/api/openrouter/tools/list`] as const;
    }

    
export const getGetApiOpenrouterToolsListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>> = ({ signal }) => getApiOpenrouterToolsList(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>
export type GetApiOpenrouterToolsListInfiniteQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOpenrouterToolsListQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>> = ({ signal }) => getApiOpenrouterToolsList(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsListQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>>
export type GetApiOpenrouterToolsListQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsList<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsList<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsList<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsList<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiPaymentCreateCheckoutSession = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/payment/create-checkout-session`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiPaymentCreateCheckoutSessionMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPaymentCreateCheckoutSession>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiPaymentCreateCheckoutSession>>, TError,void, TContext> => {
    
const mutationKey = ['postApiPaymentCreateCheckoutSession'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPaymentCreateCheckoutSession>>, void> = () => {
          

          return  postApiPaymentCreateCheckoutSession()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPaymentCreateCheckoutSessionMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPaymentCreateCheckoutSession>>>
    
    export type PostApiPaymentCreateCheckoutSessionMutationError = ErrorType<unknown>

    export const usePostApiPaymentCreateCheckoutSession = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPaymentCreateCheckoutSession>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPaymentCreateCheckoutSession>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiPaymentCreateCheckoutSessionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiPaymentAdminCreateCustomCheckout = (
    adminCustomCheckoutRequestDTO: AdminCustomCheckoutRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/payment/admin/create-custom-checkout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminCustomCheckoutRequestDTO, signal
    },
      );
    }
  


export const getPostApiPaymentAdminCreateCustomCheckoutMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPaymentAdminCreateCustomCheckout>>, TError,{data: AdminCustomCheckoutRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiPaymentAdminCreateCustomCheckout>>, TError,{data: AdminCustomCheckoutRequestDTO}, TContext> => {
    
const mutationKey = ['postApiPaymentAdminCreateCustomCheckout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPaymentAdminCreateCustomCheckout>>, {data: AdminCustomCheckoutRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiPaymentAdminCreateCustomCheckout(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPaymentAdminCreateCustomCheckoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPaymentAdminCreateCustomCheckout>>>
    export type PostApiPaymentAdminCreateCustomCheckoutMutationBody = AdminCustomCheckoutRequestDTO
    export type PostApiPaymentAdminCreateCustomCheckoutMutationError = ErrorType<unknown>

    export const usePostApiPaymentAdminCreateCustomCheckout = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPaymentAdminCreateCustomCheckout>>, TError,{data: AdminCustomCheckoutRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPaymentAdminCreateCustomCheckout>>,
        TError,
        {data: AdminCustomCheckoutRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiPaymentAdminCreateCustomCheckoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiRaceRecordsTrackId = (
    trackId: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<RaceRecordResponseDTO>(
      {url: `/api/race/records/${trackId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiRaceRecordsTrackIdQueryKey = (trackId: string,) => {
    return [`/api/race/records/${trackId}`] as const;
    }

    
export const getGetApiRaceRecordsTrackIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>, TError = ErrorType<unknown>>(trackId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRaceRecordsTrackIdQueryKey(trackId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>> = ({ signal }) => getApiRaceRecordsTrackId(trackId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(trackId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRaceRecordsTrackIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>
export type GetApiRaceRecordsTrackIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiRaceRecordsTrackIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>, TError = ErrorType<unknown>>(
 trackId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>,
          TError,
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRaceRecordsTrackIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>, TError = ErrorType<unknown>>(
 trackId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>,
          TError,
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRaceRecordsTrackIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>, TError = ErrorType<unknown>>(
 trackId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRaceRecordsTrackIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>, TError = ErrorType<unknown>>(
 trackId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRaceRecordsTrackIdInfiniteQueryOptions(trackId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiRaceRecordsTrackIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError = ErrorType<unknown>>(trackId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRaceRecordsTrackIdQueryKey(trackId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>> = ({ signal }) => getApiRaceRecordsTrackId(trackId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(trackId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRaceRecordsTrackIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>>
export type GetApiRaceRecordsTrackIdQueryError = ErrorType<unknown>


export function useGetApiRaceRecordsTrackId<TData = Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError = ErrorType<unknown>>(
 trackId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>,
          TError,
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRaceRecordsTrackId<TData = Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError = ErrorType<unknown>>(
 trackId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>,
          TError,
          Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRaceRecordsTrackId<TData = Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError = ErrorType<unknown>>(
 trackId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRaceRecordsTrackId<TData = Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError = ErrorType<unknown>>(
 trackId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRaceRecordsTrackId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRaceRecordsTrackIdQueryOptions(trackId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRaceResults = (
    addRaceResultRequestDTO: AddRaceResultRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<RaceResultResponseDTO>(
      {url: `/api/race/results`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addRaceResultRequestDTO, signal
    },
      );
    }
  


export const getPostApiRaceResultsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRaceResults>>, TError,{data: AddRaceResultRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRaceResults>>, TError,{data: AddRaceResultRequestDTO}, TContext> => {
    
const mutationKey = ['postApiRaceResults'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRaceResults>>, {data: AddRaceResultRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiRaceResults(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRaceResultsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRaceResults>>>
    export type PostApiRaceResultsMutationBody = AddRaceResultRequestDTO
    export type PostApiRaceResultsMutationError = ErrorType<unknown>

    export const usePostApiRaceResults = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRaceResults>>, TError,{data: AddRaceResultRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRaceResults>>,
        TError,
        {data: AddRaceResultRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiRaceResultsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiStatistics = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<GameStatisticsDTO>(
      {url: `/api/Statistics`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiStatisticsQueryKey = () => {
    return [`/api/Statistics`] as const;
    }

    
export const getGetApiStatisticsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiStatistics>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStatisticsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStatistics>>> = ({ signal }) => getApiStatistics(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiStatisticsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStatistics>>>
export type GetApiStatisticsInfiniteQueryError = ErrorType<unknown>


export function useGetApiStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStatistics>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStatistics>>,
          TError,
          Awaited<ReturnType<typeof getApiStatistics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStatistics>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStatistics>>,
          TError,
          Awaited<ReturnType<typeof getApiStatistics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStatistics>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStatistics>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiStatisticsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getApiStatistics>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStatisticsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStatistics>>> = ({ signal }) => getApiStatistics(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStatistics>>>
export type GetApiStatisticsQueryError = ErrorType<unknown>


export function useGetApiStatistics<TData = Awaited<ReturnType<typeof getApiStatistics>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStatistics>>,
          TError,
          Awaited<ReturnType<typeof getApiStatistics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiStatistics<TData = Awaited<ReturnType<typeof getApiStatistics>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStatistics>>,
          TError,
          Awaited<ReturnType<typeof getApiStatistics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiStatistics<TData = Awaited<ReturnType<typeof getApiStatistics>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiStatistics<TData = Awaited<ReturnType<typeof getApiStatistics>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStatistics>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiStatisticsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiWebhookStripe = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/webhook/stripe`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiWebhookStripeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiWebhookStripe>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiWebhookStripe>>, TError,void, TContext> => {
    
const mutationKey = ['postApiWebhookStripe'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiWebhookStripe>>, void> = () => {
          

          return  postApiWebhookStripe()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiWebhookStripeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiWebhookStripe>>>
    
    export type PostApiWebhookStripeMutationError = ErrorType<unknown>

    export const usePostApiWebhookStripe = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiWebhookStripe>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiWebhookStripe>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiWebhookStripeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiToplistTime = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<ToplistEntryDTO[]>(
      {url: `/api/Toplist/time`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiToplistTimeQueryKey = () => {
    return [`/api/Toplist/time`] as const;
    }

    
export const getGetApiToplistTimeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistTime>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiToplistTimeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiToplistTime>>> = ({ signal }) => getApiToplistTime(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiToplistTimeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiToplistTime>>>
export type GetApiToplistTimeInfiniteQueryError = ErrorType<unknown>


export function useGetApiToplistTimeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistTime>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistTime>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistTime>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistTimeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistTime>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistTime>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistTime>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistTimeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistTime>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiToplistTimeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistTime>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiToplistTimeInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiToplistTimeQueryOptions = <TData = Awaited<ReturnType<typeof getApiToplistTime>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiToplistTimeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiToplistTime>>> = ({ signal }) => getApiToplistTime(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiToplistTimeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiToplistTime>>>
export type GetApiToplistTimeQueryError = ErrorType<unknown>


export function useGetApiToplistTime<TData = Awaited<ReturnType<typeof getApiToplistTime>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistTime>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistTime>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistTime<TData = Awaited<ReturnType<typeof getApiToplistTime>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistTime>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistTime>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistTime<TData = Awaited<ReturnType<typeof getApiToplistTime>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiToplistTime<TData = Awaited<ReturnType<typeof getApiToplistTime>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistTime>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiToplistTimeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiToplistKilometers = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<ToplistEntryDTO[]>(
      {url: `/api/Toplist/kilometers`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiToplistKilometersQueryKey = () => {
    return [`/api/Toplist/kilometers`] as const;
    }

    
export const getGetApiToplistKilometersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistKilometers>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiToplistKilometersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiToplistKilometers>>> = ({ signal }) => getApiToplistKilometers(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiToplistKilometersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiToplistKilometers>>>
export type GetApiToplistKilometersInfiniteQueryError = ErrorType<unknown>


export function useGetApiToplistKilometersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistKilometers>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistKilometers>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistKilometers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistKilometersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistKilometers>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistKilometers>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistKilometers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistKilometersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistKilometers>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiToplistKilometersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiToplistKilometers>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiToplistKilometersInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiToplistKilometersQueryOptions = <TData = Awaited<ReturnType<typeof getApiToplistKilometers>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiToplistKilometersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiToplistKilometers>>> = ({ signal }) => getApiToplistKilometers(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiToplistKilometersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiToplistKilometers>>>
export type GetApiToplistKilometersQueryError = ErrorType<unknown>


export function useGetApiToplistKilometers<TData = Awaited<ReturnType<typeof getApiToplistKilometers>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistKilometers>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistKilometers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistKilometers<TData = Awaited<ReturnType<typeof getApiToplistKilometers>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiToplistKilometers>>,
          TError,
          Awaited<ReturnType<typeof getApiToplistKilometers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiToplistKilometers<TData = Awaited<ReturnType<typeof getApiToplistKilometers>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiToplistKilometers<TData = Awaited<ReturnType<typeof getApiToplistKilometers>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiToplistKilometers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiToplistKilometersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsers = (
    params?: GetApiUsersParams,
 signal?: AbortSignal
) => {
      
      
      return customClient<UserListResponseDTO>(
      {url: `/api/users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiUsersQueryKey = (params?: GetApiUsersParams,) => {
    return [`/api/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiUsers>>, GetApiUsersParams['pageNumber']>, TError = ErrorType<unknown>>(params?: GetApiUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData, Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']> = ({ signal, pageParam }) => getApiUsers({...params, pageNumber: pageParam || params?.['pageNumber']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData, Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersInfiniteQueryError = ErrorType<unknown>


export function useGetApiUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsers>>, GetApiUsersParams['pageNumber']>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiUsersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData, Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsers>>, GetApiUsersParams['pageNumber']>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData, Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsers>>, GetApiUsersParams['pageNumber']>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData, Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsers>>, GetApiUsersParams['pageNumber']>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData, Awaited<ReturnType<typeof getApiUsers>>, QueryKey, GetApiUsersParams['pageNumber']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = ErrorType<unknown>


export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiUsers = (
    createUserRequestDTO: CreateUserRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<UserResponseDTO>(
      {url: `/api/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequestDTO, signal
    },
      );
    }
  


export const getPostApiUsersMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{data: CreateUserRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{data: CreateUserRequestDTO}, TContext> => {
    
const mutationKey = ['postApiUsers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsers>>, {data: CreateUserRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiUsers(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>
    export type PostApiUsersMutationBody = CreateUserRequestDTO
    export type PostApiUsersMutationError = ErrorType<unknown>

    export const usePostApiUsers = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{data: CreateUserRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        {data: CreateUserRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiUsersId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customClient<UserResponseDTO>(
      {url: `/api/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUsersIdQueryKey = (id: string,) => {
    return [`/api/users/${id}`] as const;
    }

    
export const getGetApiUsersIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersId>>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({ signal }) => getApiUsersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersId>>>
export type GetApiUsersIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiUsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersId>>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiUsersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({ signal }) => getApiUsersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersId>>>
export type GetApiUsersIdQueryError = ErrorType<unknown>


export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiUsersId = (
    id: string,
    updateUserRequestDTO: UpdateUserRequestDTO,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequestDTO
    },
      );
    }
  


export const getPutApiUsersIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: UpdateUserRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: UpdateUserRequestDTO}, TContext> => {
    
const mutationKey = ['putApiUsersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersId>>, {id: string;data: UpdateUserRequestDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiUsersId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersId>>>
    export type PutApiUsersIdMutationBody = UpdateUserRequestDTO
    export type PutApiUsersIdMutationError = ErrorType<unknown>

    export const usePutApiUsersId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: UpdateUserRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersId>>,
        TError,
        {id: string;data: UpdateUserRequestDTO},
        TContext
      > => {

      const mutationOptions = getPutApiUsersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiUsersId = (
    id: string,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiUsersIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiUsersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUsersId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsersId>>>
    
    export type DeleteApiUsersIdMutationError = ErrorType<unknown>

    export const useDeleteApiUsersId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUsersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiUsersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiUsersSeed = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<void>(
      {url: `/api/users/seed`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiUsersSeedMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsersSeed>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsersSeed>>, TError,void, TContext> => {
    
const mutationKey = ['postApiUsersSeed'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsersSeed>>, void> = () => {
          

          return  postApiUsersSeed()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsersSeedMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsersSeed>>>
    
    export type PostApiUsersSeedMutationError = ErrorType<unknown>

    export const usePostApiUsersSeed = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsersSeed>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsersSeed>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiUsersSeedMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiUsersAdminAll = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<AdminUserResponseDTO[]>(
      {url: `/api/users/admin/all`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUsersAdminAllQueryKey = () => {
    return [`/api/users/admin/all`] as const;
    }

    
export const getGetApiUsersAdminAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersAdminAll>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersAdminAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersAdminAll>>> = ({ signal }) => getApiUsersAdminAll(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersAdminAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersAdminAll>>>
export type GetApiUsersAdminAllInfiniteQueryError = ErrorType<unknown>


export function useGetApiUsersAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersAdminAll>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersAdminAll>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersAdminAll>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersAdminAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersAdminAll>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersAdminAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiUsersAdminAllQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersAdminAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersAdminAll>>> = ({ signal }) => getApiUsersAdminAll(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersAdminAllQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersAdminAll>>>
export type GetApiUsersAdminAllQueryError = ErrorType<unknown>


export function useGetApiUsersAdminAll<TData = Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersAdminAll<TData = Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersAdminAll>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersAdminAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersAdminAll<TData = Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersAdminAll<TData = Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersAdminAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersAdminAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiUsersAdminUserIdUsername = (
    userId: string,
    changeUserNameRequestDTO: ChangeUserNameRequestDTO,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/users/admin/${userId}/username`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: changeUserNameRequestDTO
    },
      );
    }
  


export const getPutApiUsersAdminUserIdUsernameMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdUsername>>, TError,{userId: string;data: ChangeUserNameRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdUsername>>, TError,{userId: string;data: ChangeUserNameRequestDTO}, TContext> => {
    
const mutationKey = ['putApiUsersAdminUserIdUsername'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersAdminUserIdUsername>>, {userId: string;data: ChangeUserNameRequestDTO}> = (props) => {
          const {userId,data} = props ?? {};

          return  putApiUsersAdminUserIdUsername(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersAdminUserIdUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersAdminUserIdUsername>>>
    export type PutApiUsersAdminUserIdUsernameMutationBody = ChangeUserNameRequestDTO
    export type PutApiUsersAdminUserIdUsernameMutationError = ErrorType<unknown>

    export const usePutApiUsersAdminUserIdUsername = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdUsername>>, TError,{userId: string;data: ChangeUserNameRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersAdminUserIdUsername>>,
        TError,
        {userId: string;data: ChangeUserNameRequestDTO},
        TContext
      > => {

      const mutationOptions = getPutApiUsersAdminUserIdUsernameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putApiUsersAdminUserIdMakeAdmin = (
    userId: string,
    makeUserAdminRequestDTO: MakeUserAdminRequestDTO,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/users/admin/${userId}/make-admin`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: makeUserAdminRequestDTO
    },
      );
    }
  


export const getPutApiUsersAdminUserIdMakeAdminMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdMakeAdmin>>, TError,{userId: string;data: MakeUserAdminRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdMakeAdmin>>, TError,{userId: string;data: MakeUserAdminRequestDTO}, TContext> => {
    
const mutationKey = ['putApiUsersAdminUserIdMakeAdmin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersAdminUserIdMakeAdmin>>, {userId: string;data: MakeUserAdminRequestDTO}> = (props) => {
          const {userId,data} = props ?? {};

          return  putApiUsersAdminUserIdMakeAdmin(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersAdminUserIdMakeAdminMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersAdminUserIdMakeAdmin>>>
    export type PutApiUsersAdminUserIdMakeAdminMutationBody = MakeUserAdminRequestDTO
    export type PutApiUsersAdminUserIdMakeAdminMutationError = ErrorType<unknown>

    export const usePutApiUsersAdminUserIdMakeAdmin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdMakeAdmin>>, TError,{userId: string;data: MakeUserAdminRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersAdminUserIdMakeAdmin>>,
        TError,
        {userId: string;data: MakeUserAdminRequestDTO},
        TContext
      > => {

      const mutationOptions = getPutApiUsersAdminUserIdMakeAdminMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const putApiUsersAdminUserIdSetPaid = (
    userId: string,
    setUserPaidRequestDTO: SetUserPaidRequestDTO,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/users/admin/${userId}/set-paid`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: setUserPaidRequestDTO
    },
      );
    }
  


export const getPutApiUsersAdminUserIdSetPaidMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdSetPaid>>, TError,{userId: string;data: SetUserPaidRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdSetPaid>>, TError,{userId: string;data: SetUserPaidRequestDTO}, TContext> => {
    
const mutationKey = ['putApiUsersAdminUserIdSetPaid'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersAdminUserIdSetPaid>>, {userId: string;data: SetUserPaidRequestDTO}> = (props) => {
          const {userId,data} = props ?? {};

          return  putApiUsersAdminUserIdSetPaid(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersAdminUserIdSetPaidMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersAdminUserIdSetPaid>>>
    export type PutApiUsersAdminUserIdSetPaidMutationBody = SetUserPaidRequestDTO
    export type PutApiUsersAdminUserIdSetPaidMutationError = ErrorType<unknown>

    export const usePutApiUsersAdminUserIdSetPaid = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersAdminUserIdSetPaid>>, TError,{userId: string;data: SetUserPaidRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersAdminUserIdSetPaid>>,
        TError,
        {userId: string;data: SetUserPaidRequestDTO},
        TContext
      > => {

      const mutationOptions = getPutApiUsersAdminUserIdSetPaidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
